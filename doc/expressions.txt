Positron expressions:

An expression with an environment resolves to a value.
(This is different from coercion, where the value is adapted to it's use).

Examples:

abc:
- environment lookup "abc".

abc.def:
- environment lookup "abc", then
  - if map: select key "def"
  - if object: select attribute "def"
  -            or call method "def"

abc.0.4:
- environment lookup "abc"
- array element 0
- array element 4

"abc":
- literal string abc

1
- literal number 1

abc(def):
- call function abc(which?) on environment lookup "def".
  It makes the most sense to use the same rules as for other subexpressions:
  abc is then also an environment lookup.

abc.def(4, aeu, "this").0.xyz
- environment lookup "abc"
- call method "def" with
  - literal number 4
  - environment lookup "aeu"
  - literal string "this"
- array element 0
- key, attribute or method "xyz"

SO WE HAVE:

- literal strings
- literal values
- environment lookups (this should be default!)
- map key selection
- array element selection
- object attribute selection
- object method call (with or without parameters)
- unbound function call

We cannot let a.b evaluate to the bound method, then let coercion handle it: what about a.b.c? .

Quotation signs:
'abc', "abc" and `abc` all evaluate to the literal string 'abc'. The quotes must be the same.
Backticks are included because ' and " are reserved XML characters.

OVERRIDES:
'abc' (or any other quotation mark) to force literal interpretation.
To force environment lookup, technically ENV(abc) or ENV('abc') should work.
No, not simple enough: keep looking
$abc? $$$$abc? (abc)? Technically works

abc.(def).ghi: env of abc, then env of def, then literal key ghi.

So ((abc)) is env of env of abc?
(('abc')) is env of literal abc, the same as (abc).
.('abc'). is the same as .abc.
(abc).def = env of env of abc, literal key def

If JavaScript and Lua can sell this, so can I.
This will be *highly confusing*, I'm afraid - but I like it. It's advanced usage anyway...
Precedence? 'a ? !(b : c)' evaluates env of 'b' : 'c' :-/

Ok, no, wait. $abc (Perlish) or *abc (C-style) should work. I'm not sure that ((abc)) would
be $$abc in a naÃ¯ve implementation anyway. Let's go with $.

OPERATORS:
No assignment!
And and or: use ? and : as LTR shortcutting versions (see Python: a and b or c)
No Arithmetic, yet. Use Functions. (Hehe, how about 'operator+' Functions?)
Well, comparison operators would be nice: '='.
Negation: !(Expression)

Grammar:
EXPR = ALTERNATIVE ( [?:] ALTERNATIVE) *
ALTERNATIVE = OPERAND | '!' ALTERNATIVE
OPERAND = ETERM ( '.' DTERM )*
ETERM = TERM
DTERM = TERM
TERM = SYMBOL | STRING | NUMBER | '(' EXPR ')' | FUNCCALL
FUNCCALL = SYMBOL '(' EXPR (, EXPR)* ')'
where ETERM means a SYMBOL is an environment lookup, while DTERM means it is direct or literal

What about fun(abc)('param') ? I.e. Method chaining? Use 'TERM' instead of 'SYMBOL' in last form? (And use magic to end the left recursion)
FUNCCALL = ETERM '(' EXPR (, EXPR)* ')'
-> allows a.f(x), a.$f(x), a.f(x)(y) etc.
Wait, no. a.f(x) has 'f' as a DTERM, not an ETERM :-/

EXPR = ALTERNATIVE ( [?:] ALTERNATIVE) *
ALTERNATIVE = OPERAND | '!' ALTERNATIVE
OPERAND = ETERM ( '.' DTERM )*
ETERM = VARIABLE | STRING | NUMBER | '(' EXPR ')' | EFUNC
EFUNC = ETERM '(' EXPR ( ',' EXPR )* ')'
DTERM = SELECTOR | '$' VARIABLE | NUMBER | '(' EXPR ')' | DFUNC
DFUNC = DTERM '(' EXPR ( ',' EXPR )* ')'

We're slipping again. What about "0.x" ? What about "x"? What about "a.x", "a.0" etc.?

OPERAND = "a lone variable or literal" | "several things with dots between"
"several things with dots between" = "the first dotted thing" . "dotted things in the middle" . "the last dotted thing"
"the first dotted thing": not a literal string or number. Probably a named environment lookup, or named function call. Or '$' + name for even more indirection.
"the last dotted thing": a name, a number, a method, "something that evaluates to a name".
"dotted things in the middle": a name, a method, "something that evaluates to a name".

We're slipping again. The two components of "a.x" mean the exact same thing: key 'a' in the global environment, and key 'x' in that.
So no "ETERM"s or stuff like that.

EXPR = ALTERNATIVE ( [?:] ALTERNATIVE) *
ALTERNATIVE = OPERAND | '!' ALTERNATIVE
OPERAND = LITERAL_STR | LITERAL_NUM | LTERM RTERM* { separated by '.' }
LTERM = IDENTIFIER | '$' LTERM | '(' EXPR ')' | FUNCCALL
RTERM = IDENTIFIER | '$' LTERM | INDEX | '(' EXPR ')' | FUNCCALL
FUNCCALL = LTERM '(' ARGS ')'
ARGS = EXPR* { separated by ',' }
LITERAL_STR = '"' [^"]+ '"'
LITERAL_NUM = +-? \d+
SYMBOL = <rules for an identifier>
INDEX = +-? \d

We won't have 'a."key"' nor '"a".key' in this grammar. Also, '0.key' is right out. 'a.0' is ok, though.
Not 'a.$0', though! Or '0(10,20)' nor 'a.0(10,20)' - wait, why not? No, too confusing, use '(a.0)(10,20)' for that. Sorry.
Ok, wait, so '(a.0)' is a function, and call that?
What about 'a.method' vs. 'a.method()' ? Perl can't really do that...

FINAL GRAMMAR:

I've finally built a grammar that works and seems sufficient:

expression: <leftop: alternative /([:?])/ alternative> { @{$item[1]} == 1 ? $item[1]->[0] : ['expression', @{$item[1]}]; }
alternative: '!' alternative { ['not', $item[2]]; } | operand
operand: string | number | lterm ('.' rterm)(s) { ['dot', $item[1], @{$item[2]}] } | lterm
lterm: '(' expression ')' { $item[2] } | funccall | identifier | '$' lterm { ['env', $item[2]] }
rterm: '(' expression ')' { $item[2] } | methcall | key | string | integer | '$' lterm { ['env', $item[2]] }
string: '"' /[^"]*/ '"' { $item[2] } | '\'' /[^\']*/ '\'' { $item[2] } | '`' /[^`]*/ '`' { $item[2] }
identifier: /[a-zA-Z_]\w*/ {['env', $item[1]]}
key: /[a-zA-Z_]\w*/ { $item[1] }
number: /[+-]?\d+(?:\.\d+)?/ { $item[1] }
integer: /[+-]?\d+/ { $item[1] }
funccall: identifier '(' expression(s? /\s*,\s*/) ')' { ['funccall', $item[1], @{$item[3]}] }
methcall: key '(' expression(s? /\s*,\s*/) ')' { ['methcall', $item[1], @{$item[3]}] }

Strings can't contain their delimiters, but there are three of them. Maybe a
system with entities?

We won't have 'a(10)(20)', but we have 'hash."long key"'.
