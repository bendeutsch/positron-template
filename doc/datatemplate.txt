DataTemplate:

given a stash of data (as usual), and a data structure as template,
generate a new data structure, with the "structure of the template",
and the "data of the stash".

- structures without template directives evaluate to themselves.

Each internal structure starts with "I want a..."
*OR* "I want some..." in the case of "evaporating" wrappers
(Also called "interpolating" constructs).

Since "interpolating" is so common, we'll change the syntax to better
support it:

LISTS:

[ '@list',  '$var', 'zig' ] -> [ 'one', 'zig', 'two', 'zig' ]
[ '<@list', '$var', 'zig' ] -> ( 'one', 'zig', 'two', 'zig' )
[ '@list',  ['$var', 'zig' ] ] -> [ ['one', 'zig'], ['two', 'zig'] ]
[ '<@list',  ['$var', 'zig' ] ] -> ( ['one', 'zig'], ['two', 'zig'] )

HASHES:

A hash needs a 'key => value' construct to "loop over". So a hash as
a target defines what each 'key => 'value' means.

Pointing to a non-hash means... something? It's evaluated "in hash context"
in any case. '$_' is ideal. '1' is technically a violation.
'[ 1, 2, 3 ]' will also not work. An interpolating construct will work.

For each key/value in the source hash, '_' is set to { key => value },
'key' is set to key and 'value' is set to value.

{ '%hash' => '$_' } -> { one => 1, two => 2 }
{ '<%hash' => '$_' } -> ( one => 1, two => 2 )
{ '%hash' => { '$key' => ['$value'] } } -> { one => [1], two => [2] }
{ '<%hash' => { '$key' => ['$value'] } } -> ( one => [1], two => [2] )

{ '%hash' => [ '<?cond', { key => 1 }, { key => 0 } ] } -> { key => 1, key => 0, key => 0 ...}
Should this auto-interpolate?
{ '%hash' => { '|given' => { cond1 => 1, cond2 => 2} } }
>>Error: '1' does not match the hash context in 'given'. (never gets to %hash)
{ '%hash' => { '<|given' => { cond1 => 1, cond2 => 2} } }
>>Error: '1' does not match the hash context in 'given'. (still never gets to %hash)
{ '%hash' => { '|given' => { cond1 => { one => 1 }, cond2 => { two => 2 } } } }
-> { one => 1, two => 2, one => 1 }...
?? What about:
{ '%hash' => { '<|given' => { cond1 => { one => 1 }, cond2 => { two => 2 } } } }

[ '|given', { cond1 => 1, cond2 => 2 } ] -> [ 1 ]
[ '<|given', { cond1 => 1, cond2 => 2 } ] -> ( 1 )
[ '|given', { cond1 => [1, 2], cond2 => [3, 4] } ] -> [ [1, 2] ]
[ '<|given', { cond1 => [1, 2], cond2 => [3, 4] } ] -> [1, 2]
[ '<<|given', { cond1 => [1, 2], cond2 => [3, 4] } ] -> (1, 2)

The 'given' syntax is far from perfect... like conditions, maybe auto-interpolate?
No, consistency is key!
We need to clarify the 'cond' parts. '=1', '=match', '=' (empty), '_' (default)

hash = { one => 1, two => 2, three => 3 }
{ '%hash' => { '<|key' => { '=one' => { foo => '$value' }, '_' => '$_' } } }
{ one => 1 } --> { foo => '$value' } --> { foo => 1 }
{ two => 2 } --> $_ --> { two => 2}
{ three => 3 } --> $_ --> { three => 3 }
-> { foo => 1, two => 2, three => 3 }

IF-THEN-ELSE

[ '?true', 'one', 'two' ] -> ['one']
[ '<?true', 'one', 'two' ] -> ('one')
[ '<?true', ['one', 'two'], [ 1, 2 ] ] -> ['one', 'two']
[ '<<?true', ['one', 'two'], [ 1, 2 ] ] -> ('one', 'two')

--- OBSOLETE: ---

Examples:
[ 'hello', { one => 1, two => 2} ] stays the same


LISTS:

[ ... [ '@things' ] ... ] -> [ ... [ 1, 2, 3 ] ... ]

[ ... [ '@things', 'this', '$that' ] ... ] -> [ ... ['this', 1, 'this', 2, 'this', 3 ] ... ]

[ ... [ '@-things', 'this' '$that' ] ... ] ->
[ ... 'this', 1, 'this', 2, 'this', 3 ... ]

+? for empty lists?

$_ : the entire thing we're looping over (e.g. also list-of-scalars)

'@'  : repeat contents in this list, remove entire list if empty
'@-' : repeat contents *outside of list*
'@+' : repeat contents in this list, keep an empty list
'@*' : repeat contents in their own list

[ ... [ '@empty' ] ... ] -> [ ... ... ]

[ ... [ '@+empty' ] ... ] -> [ ... [] ... ]

[ ... [ '@*things', 'this', '$that' ] ... ] -> 
[ ... [ 'this', 1 ] , [ 'this' , 2 ] , [ 'this' , 3 ], ... ]

Also:
[ ... [ '@-things', ['this, '$that'] ] ... ] ->
[ ... [ 'this', 1 ] , [ 'this' , 2 ] , [ 'this' , 3 ], ... ]

[ ... [ '@things', ['this, '$that'] ] ... ] ->
[ ... [ [ 'this', 1 ] , [ 'this' , 2 ] , [ 'this' , 3 ] ], ... ]

HASHES:

{ one => 1, two => 2 }
{ '%things' => ? } -> { one => 1, two => 2 }

Key? Value?
{ '%things' => ?, '$x' => '$y', '$z' => 0 } ->
{ 'one' => 1, 'one_z' => 0, 'two' => 2, 'two_z' => 0 }

{ '%empty' => ? } -> 
{ '%+empty' => ? } -> {}
{ '%-things' => ? } -> (one, 1, two, 2)

How do we interpolate a list into an existing hash?

{ 'default' => 1, %things } ?
{ 'default' => 1, '%-things' => ? }
{ 'default' => 1, 'things' => { '%things' } } is easy... supposedly

What does a hash consist of ? keys and values
We need the 'value' of the '%' construct to provide input on what to do.
Possible outcomes:
- we want to interpolate a passed hashref into a given hash
- we want to expand a passed hashref into a new hashref
  - with instructions what to do!

{ 'default' => 1, '%things' => 1 } non-hash: just do it
{ 'default' => 1, '%things' => { '$key' => '$value' } } new hash... named what?
{ 'default' => 1, '%-things' => { '$key' => '$value' } } interpolate, default behavior

The "'%things' => ?" syntax does not allow for the key under which the new hash ref is stored -> must always interpolate!
'=> <constant>' means 'the hash in-place', '=> {}' means 'interpolate the resulting hash for each $key + $value'

{ 'default' => 1, '@numbers' => { '$_' => 1 } }
-> expand to hash with given keys and constant value
{ 'default' => 1, '@numbers' => { '$_' => '$sortname(_)'} }

So to fill a hash, the construct must always point at a hash ref, which is interpolated. We need a key => value!

{ 'default' => 1, '@numbers' => { '$_' => 1, '{$_}b' => 2 } }

LoH:
{ 'default' => 1, '@things' => { '$name' => '$number', '$value' => 0 } }

IF-THEN-ELSE

[ '?if', '$then', 'else' ] -> 'then'  or  'else'
[ '?+if', '$then', 'else' ] -> ['then'] or ['else']
[ '?-if', ['then', 'morethen'], ['else', 'moreelse'] ] -> 'then', 'morethen' or 'else', 'moreelse'

SWITCHES
{ '?given' => { 'when1' => 'one', 'when2' => 'two', '' => 'default'} } 
-> 'one'.
{ '?+given' ... -> keep {}
{ '?given' => { 'when1' => ['things', 'here'] ... -> ['things', 'here']
{ '?-given' => """""""""""""""""""""""""""""""""  -> 'things', 'here'

COMMENTS

['one', '# not!', 'two' ] -> ['one', 'two']
'the {#not so fine} text' -> 'the  text'

Use quantifiers for whitespace chomping

['one', 'two', '/comment', 'three', 'four'] -> ['one', 'two']
['/-comment'...] -> ()

INCLUDES

[ './path/to/template', 'one', 'two' ] -> [ <internal template> ]?
What about 'one' and 'two'?
[ '.-/path/' ] -> <internal template>
[ '.+/path/' ] -> [ <internal template> ] ?

{ './path/to/template' => 1 } -> { <internal hash template> } ?
{ './path/to/template' => [ children ] } -> { <internal hash template> } ?
{ './path/to/template' => { children => childvalue } } -> { <internal hash template> } ?

Hm, '.' sounds like a path component! Use another sigil?
Or even use ':' and ';' exclusively?

How is ',' and ';' different from
[ '@var' ] or { '%var' => 1 }
-> use ':' only.

Each ':/thingy/' will cause "the children" to be captured,
to be inserted when we find a ':'.
This makes it clear what happens to 'one' and 'two' above: those are
"the children", a new array ref or hash ref. This will replace
[':'] or {':'}, as needed.
[':-'] or {':-'} will interpolate

[':abc', 'one'] + [':'] -> ['one']
[':abc', 'one'] + [':-'] -> ('one')
[':abc', 'one'] + [':+'] -> [['one']] ?

[':abc', ['one']] + [':'] -> [['one']]
[':abc', ['one']] + [':-'] -> (['one'])
[':abc', ['one']] + [':+'] -> [[['one']]] ?

We need far less quantifiers here...
Two cases: [':'] becomes 'one' and [':'] becomes ['one'].

[':abc', {one => 1}] + [':'] -> [{ one => 1 }] or { one => 1 }
[':abc', {one => 1}] + {':'} -> { one => 1 } or ( one => 1 ) ?


WRAPS

See above

FUNCTIONS

We can use '&' here!
['&abc'] -> [ ... what comes from abc ... ]
['&-abc'] -> (... what comes from abc ... )
['&+abc'] -> ?

ASSIGNMENTS

['=']
