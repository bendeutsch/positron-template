More thoughts on interpolation:

The current idea is to have '<' interpolate "the next thing", as opposed to
the '-' quantifier ('?-...') interpolate "this". Let's see how practical
this is:

Text cannot interpolate.

Direct inclusion:
[ 1, '&list', 2] -> [1, [3, 4], 2]
[ 1, '&-list', 2] -> [1, 3, 4, 2]
[ 1, '&hash', 2] -> [1, { one => 1 }, 2]
[ 1, '&-hash', 2] -> error

Lists:
let list be {title => a},{title => b}
[ @list, 1, $title ] -> [1, a, 1, b]
[ 3, [ @list, 1, $title], 4] -> [3, [1, a, 1, b], 4]
[ @-list, 1, $title ] -> (1, a, 1, b) Or: error, not for top element
[ 3, [ @-list, 1, $title], 4] -> [3, 1, a, 1, b, 4]

[ @list, {one => $title} ] -> [{ one => a}, {one => b}]
[ 3, @list, {one => $title} ] -> [3, { one => a}, {one => b}]
[ 3, [@list, {one => $title}], 4 ] -> [3, [ { one => a}, {one => b}], 4]
[ 3, [@-list, {one => $title}], 4 ] -> [3, { one => a}, {one => b}, 4]
[ 3, [1, @-list, {one => $title}], 4 ] -> [3, 1, { one => a}, {one => b}, 4] ?

-> '@-' can only interpolate into a list.
And it must be the first element.
We cannot do "value-interpolation" on a list.

Hashes:
let hash be {one => a, two => b}
{ %hash => { $key => 1, $value => 2 } } -> { one => 1, a => 2, two => 1, b => 2}

{ one => { %hash => <> }, } -> { one => {<>} }
{ one => { %-hash => <> }, } -> {<>} ?
No, sorry, '%-hash' does not work. Use '<' for this.
=> need to keep '<', there's our first use case.

If-then-else:
non-wrapping (interpolating) by default.
Do *not* add '?-this' as double-interpolation!
Hm, seems we are adding "value interpolation" anyway...

Switches:
Same

Comments:
Use '#+' for non-collapsing *text*.
'/' seems ok. It removes stuff anyway...
[ 1, ['/  no', 2, 3], 4] -> [1, [3], 4]
[ 1, ['// no', 2, 3], 4] -> [1, [], 4]
[ 1, ['/-  no', 2, 3], 4] -> [1, 3, 4]
[ 1, ['//- no', 2, 3], 4] -> [1, 4]
Again, '-' needs to be the first to interpolate properly.
Again, does not work for hashes.

Includes:
[ 1, '. file', 3] -> [ 1, ['contents of file'], 3]
[ 1, '.-file', 3] -> [1, 'contents of file', 3]

Works in the middle of a list, too!
No, wait:
[ 1, '. file', 3] -> [1, { contents => file }, 3]
So doesn't work in the middle of a list.
Unless "in the middle of a list" means "try to interpolate the *result*"
Call this "value interpolation".

Works for Arrays, but not for hashes:
{ one => 1, two => '.file' } -> { one => 1, two => { contents => file } }
{ one => 1, two => '.-file' } -> { one => 1, two => { contents => file } }
{ one => 1, '< 1' => '.file' } -> { one => 1, contents => file }

Wraps:
Same:
[1, ':file', 2, 3 ] -> [1, [ file contents with ^: -> 2 ], 3 ]
[1, ':file', [2, 3], 4 ] -> [1, [ file contents with ^: -> [2, 3] ], 4 ]
[1, ':-file', 2, 3 ] -> [1, file contents with ^: -> 2 , 3 ]
[1, ':-file', [2, 3], 4 ] -> [1, file contents with ^: -> [2, 3] , 4 ]

Again, value interpolation in middle of list:
[1, ':file', 2, 3 ] -> [1, { file contents with ^: -> 2 }, 3 ]
[1, ':-file', 2, 3 ] -> ? the same...

Hashes auto-interpolate on key anyway, but not on value anyway:
{ one => 1, two => ':file'   } -> { one => 1, two => [ contents of file with : unset ] }
{ one => 1, ':file' => value } -> { one => 1, contents => : -> value }
{ one => 1, two => { ':file' => value } } -> { one => 1, two => { contents of file with : -> value } }
{ one => 1, '< sort' => { ':file' => value } } -> { one => 1, contents of file with : -> value }

Functions:

[ 1, '^expr', [], 2 ] -> [ 1, [3], 2]
[ 1, ['^expr', []], 2 ] -> [ 1, [[3]], 2]
[ 1, ['^-expr', []], 2 ] -> [ 1, [3], 2]
[ 1, [4, '^expr', []], 2 ] -> [ 1, [4, [3]], 2]
[ 1, [4, '^-expr', []], 2 ] -> [ 1, [4, [3]], 2]
[ 1, [4, '^-expr', []], 2 ] -> [ 1, [4, 3], 2]    ?

Again with the 'value interpolation'.
And hashes, yet again, auto-interpolate.

Assignment:
[ 1, '=', 2] -> [1, eval(=,2)]
[ 1, ['=', 2], 3 ] -> [1, [eval(=,2)], 3 ]
[ 1, ['=-', 2], 3 ] -> [1, eval(=,2), 3 ]

Again with the 'value interpolation'.
And hashes, yet again, auto-interpolate.

Literals:
don't interpolate


Conclusion:
'<' in an array means 'array-interpolate the next thing'.
'< ...' in a hash means 'hash-interpolate the value'.
['*-'...] is the same as '<', ['*'...]
[x, '*-',...] is the same as [x, '<', '*', ... ]
-> '-' for syntactic sugar only.
